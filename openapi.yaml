openapi: 3.1.0
info:
  title: FakeStore API
  version: 1.0.0
  description: FakeStore backend API with layered architecture, JWT auth, and carts/ratings.
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      summary: Login (JWT obtain pair)
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      summary: Logout (blacklist refresh)
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequestRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/logout-all/:
    post:
      operationId: auth_logout_all_create
      summary: Logout from all devices
      tags:
      - Auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/auth/me/:
    get:
      operationId: auth_me_retrieve
      summary: Get current user
      tags:
      - Auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
          description: ''
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      summary: Refresh JWT
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      summary: Register user
      tags:
      - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/carts/:
    get:
      operationId: carts_list
      summary: List carts
      parameters:
      - in: query
        name: userId
        schema:
          type: integer
        description: Filter by user ID (preferred)
      tags:
      - Carts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartRead'
          description: ''
    post:
      operationId: carts_create
      description: Creates a new cart for the authenticated user. The user is derived
        from the JWT in the Authorization header; admins may include userId to create
        carts for other users. Optionally include initial products to seed line items.
      summary: Create cart
      tags:
      - Carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartCreateRequest'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/carts/{cart_id}/:
    get:
      operationId: carts_retrieve
      summary: Get cart
      parameters:
      - in: path
        name: cart_id
        schema:
          type: integer
        required: true
      tags:
      - Carts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartRead'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: carts_update
      description: Replaces the cart. Requires authentication; only the owner or a staff/superuser
        may update the cart. If unauthenticated, returns 401. If the cart does not exist or the
        actor lacks permission, returns 404 or 403 respectively.
      summary: Replace cart
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - Carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: carts_partial_update
      description: Applies add/update/remove item operations. Requires authentication; only
        the owner or a staff/superuser may patch a cart. If unauthenticated, returns 401. If the
        cart does not exist or the actor lacks permission, returns 404 or 403 respectively.
      summary: Patch cart items
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - Carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartPatchRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: carts_destroy
      description: Deletes a cart. Requires authentication; only the owner or a staff/superuser
        may delete a cart. If unauthenticated, returns 401. If the cart does not exist or the actor
        lacks permission, returns 404 or 403 respectively.
      summary: Delete cart
      parameters:
      - in: path
        name: cart_id
        schema:
          type: string
          pattern: ^\d+$
        required: true
      tags:
      - Carts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/carts/users/{user_id}/:
    get:
      operationId: carts_users_list
      summary: List carts by user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Carts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartRead'
          description: ''
  /api/categories/:
    get:
      operationId: categories_list
      summary: List categories
      tags:
      - Catalog
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: categories_create
      summary: Create category
      description: Requires staff or superuser privileges.
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/categories/{category_id}/:
    get:
      operationId: categories_retrieve
      summary: Get category
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: categories_update
      summary: Replace category
      description: Requires staff or superuser privileges.
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: categories_partial_update
      summary: Update category
      description: Requires staff or superuser privileges.
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: categories_destroy
      summary: Delete category
      description: Requires staff or superuser privileges.
      parameters:
      - in: path
        name: category_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/products/:
    get:
      operationId: products_list
      description: Supports pagination via ?page and ?limit. Cached results may be
        served.
      summary: List products
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Filter by category name
      tags:
      - Catalog
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductRead'
          description: ''
    post:
      operationId: products_create
      summary: Create product
      description: Requires staff or superuser privileges.
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/products/{product_id}/:
    get:
      operationId: products_retrieve
      summary: Get product
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: products_update
      summary: Replace product
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: products_partial_update
      summary: Update product
      description: Requires staff or superuser privileges.
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRead'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: products_destroy
      summary: Delete product
      description: Requires staff or superuser privileges.
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Catalog
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/products/{product_id}/rating/:
    get:
      operationId: products_rating_retrieve
      summary: Get rating summary
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      - in: query
        name: userId
        schema:
          type: integer
        description: User ID (optional fallback when not authenticated)
      tags:
      - Catalog
      - Ratings
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSummary'
          description: Rating summary for the product (includes userRating if authenticated)
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: products_rating_create
      summary: Set user rating
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      - in: query
        name: userId
        schema:
          type: integer
        description: User ID (optional fallback when not authenticated)
      tags:
      - Catalog
      - Ratings
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingSummary'
          description: Updated rating summary
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: products_rating_destroy
      summary: Delete user rating
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      - in: query
        name: userId
        schema:
          type: integer
        description: User ID (optional fallback when not authenticated)
      tags:
      - Catalog
      - Ratings
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Rating removed (no content)
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/products/by-categories/:
    get:
      operationId: products_by_categories_list
      summary: List products by categories
      parameters:
      - in: query
        name: categoryIds
        schema:
          type: string
        description: Comma-separated category IDs (camelCase)
        required: true
      tags:
      - Catalog
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      summary: List users
      description: Requires staff or superuser privileges.
      tags:
      - Users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      summary: Create user
      description: Authenticated requests require staff or superuser privileges; anonymous sign-up is permitted.
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/users/{user_id}/:
    get:
      operationId: users_retrieve
      summary: Get user by ID
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: users_update
      summary: Replace user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: users_partial_update
      summary: Update user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: users_destroy
      summary: Delete user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/users/{user_id}/addresses/:
    get:
      operationId: users_addresses_list
      description: Lists addresses for the specified user. Regular users may only access their own addresses; superusers may access any user's addresses.
      summary: List addresses for a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: users_addresses_create
      description: Creates an address owned by the specified user. Regular users may only create addresses for themselves; superusers may manage any user.
      summary: Create address for a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/users/addresses/{address_id}/:
    get:
      operationId: users_addresses_retrieve
      description: Retrieves an address by ID. Regular users may only access their own addresses; superusers may access any user's addresses.
      summary: Get address by ID
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: users_addresses_update
      summary: Replace address by ID
      description: Replaces an address by ID. Regular users may only manage their own addresses; superusers may manage any user's addresses.
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: users_addresses_partial_update
      summary: Update address by ID
      description: Partially updates an address by ID. Regular users may only manage their own addresses; superusers may manage any user's addresses.
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddressWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: users_addresses_destroy
      summary: Delete address by ID
      description: Deletes an address by ID. Regular users may only manage their own addresses; superusers may manage any user's addresses.
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /health/live:
    get:
      operationId: health_live_retrieve
      summary: Liveness probe
      tags:
      - Health
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthLive'
          description: Process is alive
  /health/ready:
    get:
      operationId: health_ready_retrieve
      summary: Readiness probe
      tags:
      - Health
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthReady'
          description: All critical dependencies are OK
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthReady'
          description: One or more dependencies failing (degraded)
    put:
      operationId: users_me_addresses_update
      summary: Replace address for current user
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressWriteRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: users_me_addresses_partial_update
      summary: Update address for current user
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddressWriteRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: users_me_addresses_destroy
      summary: Delete address for current user
      parameters:
      - in: path
        name: address_id
        schema:
          type: integer
        required: true
      tags:
      - Users
      - Addresses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
        number:
          type: integer
        city:
          type: string
        zipcode:
          type: string
        latitude:
          type: string
        longitude:
          type: string
      required:
      - city
      - id
      - latitude
      - longitude
      - number
      - street
      - zipcode
    AddressRequest:
      type: object
      properties:
        street:
          type: string
          minLength: 1
        number:
          type: integer
        city:
          type: string
          minLength: 1
        zipcode:
          type: string
          minLength: 1
        latitude:
          type: string
          minLength: 1
        longitude:
          type: string
          minLength: 1
      required:
      - city
      - latitude
      - longitude
      - number
      - street
      - zipcode
    AddressWrite:
      type: object
      properties:
        city:
          type: string
        street:
          type: string
        number:
          type: integer
        zipcode:
          type: string
        geolocation:
          $ref: '#/components/schemas/Geo'
      required:
      - city
      - geolocation
      - number
      - street
      - zipcode
    AddressWriteRequest:
      type: object
      properties:
        city:
          type: string
          minLength: 1
        street:
          type: string
          minLength: 1
        number:
          type: integer
        zipcode:
          type: string
          minLength: 1
        geolocation:
          $ref: '#/components/schemas/GeoRequest'
      required:
      - city
      - geolocation
      - number
      - street
      - zipcode
    CartCreateProductRequest:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
      required:
      - product_id
      - quantity
    CartCreateRequest:
      type: object
      properties:
        date:
          type: string
          minLength: 1
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartCreateProductRequest'
    CartProduct:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/ProductRead'
        quantity:
          type: integer
      required:
      - product
      - quantity
    CartRead:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        date:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
      required:
      - date
      - id
      - items
      - user_id
    CartWriteRequest:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        date:
          type: string
          minLength: 1
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
              quantity:
                type: integer
                minimum: 1
            required:
            - product_id
            - quantity
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
      required:
      - id
      - name
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
      required:
      - name
    DetailResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        status:
          type: integer
          minimum: 100
          maximum: 599
        details: {}
        hint:
          type: string
        extra:
          type: object
          additionalProperties: {}
      required:
      - code
      - message
      - status
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetail'
      required:
      - error
    Geo:
      type: object
      properties:
        lat:
          type: string
        long:
          type: string
      required:
      - lat
      - long
    GeoRequest:
      type: object
      properties:
        lat:
          type: string
          minLength: 1
        long:
          type: string
          minLength: 1
      required:
      - lat
      - long
    LogoutRequestRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    MeResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        last_login:
          type: string
          format: date-time
          nullable: true
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
      required:
      - email
      - first_name
      - id
      - is_staff
      - is_superuser
      - last_name
      - username
    PaginatedProductRead:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          nullable: true
        previous:
          type: string
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductRead'
      required:
      - count
      - next
      - previous
      - results
    PatchedAddressWriteRequest:
      type: object
      properties:
        city:
          type: string
          minLength: 1
        street:
          type: string
          minLength: 1
        number:
          type: integer
        zipcode:
          type: string
          minLength: 1
        geolocation:
          $ref: '#/components/schemas/GeoRequest'
    PatchedCartPatchRequest:
      type: object
      properties:
        add:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
              quantity:
                type: integer
                minimum: 1
            required:
            - product_id
            - quantity
        update:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
              quantity:
                type: integer
                minimum: 1
            required:
            - product_id
            - quantity
        remove:
          type: array
          items:
            type: integer
        date:
          type: string
          minLength: 1
        userId:
          type: integer
    PatchedCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
    PatchedProductWriteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        description:
          type: string
          minLength: 1
        image:
          type: string
        rate:
          type: number
          format: double
        count:
          type: integer
        categories:
          type: array
          items:
            type: integer
    PatchedUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        username:
          type: string
          minLength: 1
        phone:
          type: string
          minLength: 1
        first_name:
          type: string
          writeOnly: true
          minLength: 1
        last_name:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
        address:
          allOf:
          - $ref: '#/components/schemas/AddressWriteRequest'
          writeOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/_NameRequest'
          writeOnly: true
    ProductRead:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: string
        description:
          type: string
        image:
          type: string
        rate:
          type: string
        count:
          type: integer
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    required:
    - categories
    - count
    - description
    - image
    - price
    - rate
    - title
    ProductWriteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        description:
          type: string
          minLength: 1
        image:
          type: string
        rate:
          type: number
          format: double
        count:
          type: integer
        categories:
          type: array
          items:
            type: integer
      required:
      - description
      - image
      - price
      - title
    RegisterRequestRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
      required:
      - email
      - first_name
      - last_name
      - password
      - username
    RegisterResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - id
      - username
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        username:
          type: string
        phone:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          readOnly: true
      required:
      - addresses
      - email
      - id
      - phone
      - username
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        username:
          type: string
          minLength: 1
        phone:
          type: string
          minLength: 1
        first_name:
          type: string
          writeOnly: true
          minLength: 1
        last_name:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
        address:
          allOf:
          - $ref: '#/components/schemas/AddressWriteRequest'
          writeOnly: true
        name:
          allOf:
          - $ref: '#/components/schemas/_NameRequest'
          writeOnly: true
      required:
      - email
      - first_name
      - last_name
      - password
      - phone
      - username
    _Name:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
      required:
      - first_name
      - last_name
    _NameRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
      required:
      - first_name
      - last_name
    RatingSummary:
      type: object
      properties:
        productId:
          type: integer
        average:
          type: number
          format: double
          nullable: true
        count:
          type: integer
        userRating:
          type: integer
          nullable: true
      required:
      - productId
      - count
    HealthLive:
      type: object
      properties:
        status:
          type: string
          example: alive
      required:
      - status
    HealthReady:
      type: object
      properties:
        status:
          type: string
          example: ok
        checks:
          type: object
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                latency_ms:
                  type: number
                  format: double
              required:
              - status
            redis:
              type: object
              properties:
                status:
                  type: string
                detail:
                  type: string
                error:
                  type: string
              required:
              - status
      required:
      - status
      - checks
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
